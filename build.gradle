import com.github.spotbugs.SpotBugsTask
import org.gradle.internal.jvm.Jvm

/**
 * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 */
// Apply the java plugin to add support for Java
buildscript {

    // log the current JVM version.
    println "Build JVM Version is : " + Jvm.current()
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.org.nosphere.apache:creadur-rat-gradle:0.3.0"
        classpath group: 'org.hidetake', name: 'gradle-ssh-plugin', version: gradleSshPluginVersion
        classpath group: 'gradle.plugin.com.github.spotbugs', name: 'spotbugs-gradle-plugin', version: spotbugsPluginVersion
        classpath "org.ajoberstar:grgit:${gradleGitPluginVersion}"
        classpath "io.franzbecker:gradle-lombok:${gradleLombokPluginVersion}"
        classpath fileTree(dir: "$rootDir/libs", include: "*.jar")
    }
}


// apply the plugin outside of allProjects since the plugin attempts to set the grgit property for all the projects
// https://github.com/ajoberstar/grgit/blob/master/src/main/groovy/org/ajoberstar/grgit/gradle/GrgitPlugin.groovy#L27
apply plugin: 'org.ajoberstar.grgit'

allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    if (file("src/main/java").isDirectory()) {
        apply plugin: 'java'
        apply plugin: 'io.franzbecker.gradle-lombok'
        lombok {
            version = lombokVersion
        }
        dependencies {
            //These are compile time only dependencies needed accross all targets. Lombok uses them and may generate strange errors if they are missing.
            compileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: spotbugsAnnotationsVersion
            testCompile group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: spotbugsAnnotationsVersion
            compileOnly group: 'net.jcip', name: 'jcip-annotations', version: jcipAnnotationsVersion
            testCompile group: 'net.jcip', name: 'jcip-annotations', version: jcipAnnotationsVersion
            compileOnly 'org.projectlombok:lombok:' + lombokVersion
            testCompileOnly 'org.projectlombok:lombok:' + lombokVersion
            annotationProcessor 'org.projectlombok:lombok:' + lombokVersion
            testAnnotationProcessor 'org.projectlombok:lombok:' + lombokVersion
        }
        // Delombok sources.
        task delombok(type: io.franzbecker.gradle.lombok.task.DelombokTask, dependsOn: compileJava) {
            ext.outputDir = file("$buildDir/delombok")
            outputs.dir(outputDir)
            sourceSets.main.java.srcDirs.each {
                inputs.dir(it)
                args(it, "-d", outputDir)
            }
        }
    }
    // Plugin configurations
    apply from: "$rootDir/gradle/application.gradle"
    apply from: "$rootDir/gradle/checkstyle.gradle"
    apply from: "$rootDir/gradle/eclipse.gradle"
    apply from: "$rootDir/gradle/spotbugs.gradle"
    apply from: "$rootDir/gradle/idea.gradle"
    apply from: "$rootDir/gradle/jacoco.gradle"
    apply from: "$rootDir/gradle/java.gradle"
    apply from: "$rootDir/gradle/rat.gradle"

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://repo1.maven.org/maven2"
        }
        maven {
            url "https://repository.apache.org/snapshots"
        }
        maven {
            url "https://oss.jfrog.org/artifactory/oss-snapshot-local"
        }
        flatDir {
            dirs 'libs'
        }
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
    tasks.withType(SpotBugsTask) {
        classpath += sourceSets."${(it.name - ~/^spotbugs/).uncapitalize()}".compileClasspath
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }
    version = getProjectVersion()
    group = "io.pravega.storage"

    configurations.all {
        resolutionStrategy {
            //failOnVersionConflict()
            force "com.google.guava:guava:" + guavaVersion
            force "org.slf4j:slf4j-api:" + slf4jApiVersion
            force "com.google.code.gson:gson:2.5"
        }
    }
}

def withoutLogger = { exclude group: 'org.slf4j', module: 'slf4j-log4j12'
                      exclude group: 'org.slf4j', module: 'slf4j-simple' }


project ('common') {
    apply plugin: 'maven'
    dependencies {
        compile "io.pravega:pravega-common:${pravegaVersion}",
                "io.pravega:pravega-shared-metrics:${pravegaVersion}",
                "io.pravega:pravega-segmentstore-contracts:${pravegaVersion}",
                "io.pravega:pravega-segmentstore-storage:${pravegaVersion}"
        compile  "io.pravega:pravega-test-testcommon:${pravegaVersion}"
        compile files("$rootDir/libs/pravega-segmentstore-storage-0.9.0-2625.fd290ad-SNAPSHOT-tests.jar")
        // Adding JAXB API and the reference implementation as dependencies here, since they are not available
        // in newer Java SE versions (11 and newer).
        compile group: 'javax.xml.bind', name: 'jaxb-api', version: jaxbVersion
        compile group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: jaxbVersion
        compile group: 'javax.activation', name: 'javax.activation-api', version: activationVersion
    }
    javadoc {
        dependsOn delombok
        source = delombok.outputDir
        failOnError = true
    }
    jar {
        archiveName = "pravega-storage-adapters-test-common.jar"
        from {
            (configurations.runtime).collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }
        from sourceSets.test.output
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
}

project ('extendeds3') {
    dependencies {
        compile project(':common')
        compile files(project(':common').sourceSets.test.output)

	}
    javadoc {
        dependsOn delombok
        source = delombok.outputDir
        failOnError = true
    }
}

project ('hdfs') {
    dependencies {
        compile project(':common')
        compile files(project(':common').sourceSets.test.output)
        compile files("$rootDir/libs/pravega-segmentstore-storage-0.9.0-2625.fd290ad-SNAPSHOT-tests.jar")
        // For HDFS
        compile group: 'org.apache.hadoop', name: 'hadoop-common', version: hadoopVersion, withoutLogger
        compile group: 'org.apache.hadoop', name: 'hadoop-hdfs', version: hadoopVersion, withoutLogger
        compile group: 'org.apache.hadoop', name: 'hadoop-hdfs-client', version: hadoopVersion, withoutLogger
        testCompile group: 'org.apache.hadoop', name: 'hadoop-minicluster', version: hadoopVersion, withoutLogger
        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion
        testCompile group: 'io.netty', name: 'netty-codec-http', version: nettyVersion

	}
    javadoc {
        dependsOn delombok
        source = delombok.outputDir
        failOnError = true
    }
}

def getProjectVersion() {
    String ver = pravegaVersion
    if (grgit && ver.contains("-SNAPSHOT")) {
        String versionLabel = ver.substring(0, ver.indexOf("-SNAPSHOT"))
        def count = grgit.log(includes:['HEAD']).size()
        def commitId = "${grgit.head().abbreviatedId}"
        ver = versionLabel + "-" + count + "." + commitId + "-SNAPSHOT"
    }
    return ver
}

subprojects {
    task allDeps(type: DependencyReportTask) {}
}

task sourceCopy(type: Copy) {
    from rootDir
    into 'source'
}

task sourceTar(type: Tar) {
    dependsOn 'sourceCopy'
    from  'source'
    destinationDir = file('sourceArtifacts')
    extension = 'tgz'
    compression = Compression.GZIP
}
